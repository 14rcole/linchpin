/* This job builds the LinchPin executor container based upon * config/dockerfiles/linchpin within
 * https://github.com/CentOS-PaaS-SIG/contra-env-sample-project
 * and a couple of other projects which generate LinchPin docker images
 *
 * This Jenkinsfile will be run after a release of LinchPin is complete,
 * producing and publishing the dockerfile in the appropriate locations.
 */

import com.cloudbees.plugins.credentials.Credentials

env.ghprbGhRepository = env.ghprbGhRepository ?: 'CentOS-PaaS-SIG/linchpin'
env.ghprbActualCommit = env.ghprbActualCommit ?: 'master'

// Needed for podTemplate()
env.SLAVE_TAG = env.SLAVE_TAG ?: 'stable'
// env.TAG_NAME = env.TAG_NAME ?: 'v1.6.2a1'

// env.OPENSHIFT_NAMESPACE = env.OPENSHIFT_NAMESPACE ?: 'continuous-infra'
env.IMAGE_NAME = env.IMAGE_NAME ?: 'linchpin'
DOCKER_REPO_URL = env.DOCKER_REPO_URL ?: '172.30.254.79:5000'

// libraries.each { name, repo ->
//     library identifier: "${name}@${repo[0]}",
//             retriever: modernSCM([$class: 'GitSCMSource',
//                                   remote: repo[1]])
// }

properties([
  buildDiscarder(logRotator(artifactDaysToKeepStr: '30', artifactNumToKeepStr: '15', daysToKeepStr: '90', numToKeepStr: '30')),
  [$class: 'GithubProjectProperty', displayName: '', projectUrlStr: 'https://github.com/' + env.ghprbGhRepository],
  disableConcurrentBuilds(),
  parameters(
    [
        string(defaultValue: '',
               description: 'Github Repository',
               name: 'GHRepository'),
        string(defaultValue: 'stable',
               description: 'Tag for slave image',
               name: 'SLAVE_TAG'),
        string(defaultValue: 'contrainfra',
               description: 'Namespace where Docker Container resides',
               name: 'DOCKER_NAMESPACE'),
        string(description: 'Docker Registry',
               name: 'DOCKER_REGISTRY'),
    ]
  ),
])

def test_cmd = "uid_entrypoint run"

def containers = ['buildah']
def build_root = "config/Dockerfiles/${env.IMAGE_NAME}"
def credentials = [usernamePassword(credentialsId: 'linchpin-docker',
                   usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]

// remove the v from the TAG

// we want to modify the Dockerfile to install from INSTALL_LOCATION
repo = env.GHRepository.tokenize('/')
build_args = ['install_location': INSTALL_LOCATION,
              'git_project': repo[0],
              'git_repo': repo[1],
              'git_branch': env.BRANCH_NAME ?: 'develop']


def release_version = null
def container_versions = ['latest']

if (env.TAG_NAME) {
    def ver = env.TAG_NAME
    def version = ver.substring(1)
    container_versions.add(version)
    release_version = version
}


podTemplate = [containers: containers,
               docker_repo_url: DOCKER_REPO_URL,
               podName: 'linchpin-builder',
               jenkins_slave_image: 'jenkins-continuous-infra-slave:' + SLAVE_TAG]


deployOpenShiftTemplate(podTemplate) {

    sh "env"

    ciPipeline(sendMetrics: false, decorateBuild: decoratePRBuild()) {

//        if (release_version) {
//            testRelease(installCmd: "echo installing...",
//                        verifyCmd: "echo verifying...",
//                        repo: GHRepository,
//                        version: release_version,
//                        credentials: credentials)
//        }

        // add linchpin version
        // linchpin version will either be latest/source/version number

        buildTestContainer(versions: container_versions,
                           image_name: env.IMAGE_NAME,
                           docker_registry: DOCKER_REGISTRY,
                           docker_namespace: DOCKER_NAMESPACE,
                           credentials: credentials,
                           build_root: build_root)

    }
}
