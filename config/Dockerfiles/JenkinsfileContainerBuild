/* This job builds the LinchPin executor container based upon
 * config/dockerfiles/linchpin within 
 * https://github.com/CentOS-PaaS-SIG/contra-env-sample-project
 * and a couple of other projects which generate LinchPin docker images
 *
 * This Jenkinsfile will be run after a release of LinchPin is complete,
 * producing and publishing the dockerfile in the appropriate locations.
 */

import com.cloudbees.plugins.credentials.Credentials

//env.ghprbGhRepository = env.ghprbGhRepository ?: 'CentOS-PaaS-SIG/linchpin'
env.ghprbGhRepository = env.ghprbGhRepository ?: 'herlo/linchpin'
//env.ghprbActualCommit = env.ghprbActualCommit ?: ''
env.ghprbActualCommit = env.ghprbActualCommit ?: 'linchpin_container'

//env.TARGET_BRANCH = env.TARGET_BRANCH ?: 'develop'
env.TARGET_BRANCH = env.TARGET_BRANCH ?: 'linchpin_container'

// Needed for podTemplate()
env.SLAVE_TAG = env.SLAVE_TAG ?: 'stable'
env.FEDORA27_TAG = env.FEDORA27_TAG ?: 'stable'

//DOCKER_REPO_URL = env.DOCKER_REPO_URL ?: '172.30.254.79:5000'
DOCKER_REPO_URL = env.DOCKER_REPO_URL ?: '172.30.1.1:5000'

OPENSHIFT_NAMESPACE = env.OPENSHIFT_NAMESPACE ?: 'continuous-infra'
OPENSHIFT_SERVICE_ACCOUNT = env.OPENSHIFT_SERVICE_ACCOUNT ?: 'jenkins'

// Execution ID for this run of the pipeline
executionID = UUID.randomUUID().toString()

// Pod name to use
podName = 'linchpin-build_' + executionID

library identifier: "ci-pipeline@master",
        retriever: modernSCM([$class: 'GitSCMSource',
                              remote: "https://github.com/CentOS-Paas-SIG/ci-pipeline"])

library identifier: "cico-pipeline-library@master",
        retriever: modernSCM([$class: 'GitSCMSource',
                              remote: "https://github.com/CentOS/cico-pipeline-library"])

properties(
    [
        buildDiscarder(logRotator(artifactDaysToKeepStr: '30', artifactNumToKeepStr: '15', daysToKeepStr: '90', numToKeepStr: '30')),
        [$class: 'GithubProjectProperty', displayName: '', projectUrlStr: 'https://github.com/CentOS-PaaS-SIG/linchpin/'],
        disableConcurrentBuilds(),
        parameters(
            [
//                string(defaultValue: 'develop',
                string(defaultValue: 'linchpin_container',
                       description: '',
                       name: 'ghprbActualCommit'),
                string(defaultValue: '',
                       description: 'Github Repository',
                       name: 'ghprbGhRepository'),
                string(defaultValue: 'stable',
                       description: 'Tag for slave image',
                       name: 'SLAVE_TAG'),
                string(defaultValue: 'stable',
                       description: 'Tag for fedora27 image',
                       name: 'FEDORA27_TAG'),
                string(defaultValue: 'https://registry.hub.docker.com',
                       description: 'Docker Registry',
                       name: 'DOCKER_REGISTRY')
            ]
        ),
    ]
)

podTemplate(name: podName,
            label: podName,
            cloud: 'openshift',
            serviceAccount: OPENSHIFT_SERVICE_ACCOUNT,
            idleMinutes: 0,
            namespace: OPENSHIFT_NAMESPACE,
        containers: [
            // This adds the custom slave container to the pod.
            // Must be first with name 'jnlp'
            containerTemplate(name: 'jnlp',
                image: DOCKER_REPO_URL + '/' + OPENSHIFT_NAMESPACE + '/jenkins-continuous-infra-slave:' + SLAVE_TAG,
                ttyEnabled: false,
                privileged: true,
                alwaysPullImage: true,
                args: '${computer.jnlpmac} ${computer.name}',
                command: '',
                workingDir: '/workDir')
        ],
        volumes: [
            hostPathVolume(mountPath: '/var/run/containers', hostPath: '/var/run/containers'),
            hostPathVolume(mountPath: '/var/lib/containers', hostPath: '/var/lib/containers')
        ]
)

{
    node(podName) {
        ansiColor('xterm') {
            timestamps {
                // We need to set env.HOME because the openshift slave image
                // forces this to /home/jenkins and then ~ expands to that
                // even though id == "root"
                // See https://github.com/openshift/jenkins/blob/master/slave-base/Dockerfile#L5
                //
                // Even the kubernetes plugin will create a pod with containers
                // whose $HOME env var will be its workingDir
                // See https://github.com/jenkinsci/kubernetes-plugin/blob/master/src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesLauncher.java#L311
                //
                env.HOME = "/root"
                //
                try {
                    // Prepare our environment
                    stage("Git Checkout LinchPin") {
                        deleteDir()
                        // Set our default env variables. Many of these
                        // are ci-pipeline specific, but we do need some
                        pipelineUtils.setDefaultEnvVars()
                        // Decorate our build
                        currentBuild.displayName = " LinchPin Container Build#: ${env.BUILD_NUMBER}"

                        // Gather some info about the node we are running on for diagnostics
                        pipelineUtils.verifyPod(OPENSHIFT_NAMESPACE, env.NODE_NAME)
                        dir('linchpin') {
                            // Checkout our linchpin repo based on the value of env.ghprbActualCommit
                            checkout([$class: 'GitSCM',
                                      branches: [[name: env.ghprbActualCommit]],
                                      doGenerateSubmoduleConfigurations: false,
                                      extensions                       : [],
                                      submoduleCfg                     : [],
                                      userRemoteConfigs                : [
                                              [refspec:
                                                       '+refs/heads/*:refs/remotes/origin/*  +refs/pull/*:refs/remotes/origin/pr/* ',
                                               url: "https://github.com/${env.ghprbGhRepository}"]
                                      ]
                            ])
                            def creds = com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(
                              com.cloudbees.plugins.credentials.Credentials.class
                            );
                        }
                    }
                    stage('Build Docker Image') {
                        dir('linchpin') {

                            sh "su - -c 'ls -lR /var/run/containers/'"
                            sh "buildah bud -t linchpin ./config/Dockerfiles/linchpin"
                            string containerid = sh (
                                script: "buildah from linchpin",
                                returnStdout: true
                                ).trim()
                            //sh "buildah run -it " + containerid + " -- linchpin --version"
                        }
                    }
                } catch (e) {
                    // Set build result
                    currentBuild.result = 'FAILURE'

                    // Report the exception
                    echo e.getMessage()

                    // Throw the error
                    throw e

                } finally {
                    pipelineUtils.getContainerLogsFromPod(OPENSHIFT_NAMESPACE, env.NODE_NAME)

                    // Archive our artifacts
                    step([$class: 'ArtifactArchiver', allowEmptyArchive: true, artifacts: '**/*_logs/**,*.txt,*.groovy,**/job.*,**/*.groovy,**/inventory.*', excludes: '**/job.props,**/job.props.groovy,**/*.example', fingerprint: true])

                    // Set our message topic, properties, and content
                    //messageFields = pipelineUtils.setMessageFields("complete")

                    // Send message org.foo.bar.complete on fedmsg
                    //pipelineUtils.sendMessageWithAudit(messageFields['properties'], messageFields['content'], msgAuditFile, fedmsgRetryCount)

                }
            }
        }
    }
}
